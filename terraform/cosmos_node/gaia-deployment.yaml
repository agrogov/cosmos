apiVersion: v1
kind: Service
metadata:
  name: gaia-service
  namespace: cosmos
spec:
  selector:
    app: gaia
  ports:
  - name: p2p
    protocol: TCP
    port: 26656
    targetPort: 26656
  - name: rpc
    protocol: TCP
    port: 26657
    targetPort: 26657
  - name: api
    protocol: TCP
    port: 1317
    targetPort: 1317
  - name: grpc
    protocol: TCP
    port: 9090
    targetPort: 9090
  type: ClusterIP

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: cosmos
  name: job-reader
rules:
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: cosmos
  name: read-jobs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: job-reader
subjects:
- kind: ServiceAccount
  name: default
  namespace: cosmos

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gaia-pvc
  namespace: cosmos
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gaia-config
  namespace: cosmos
data:
  NODE_HOME: "/root/.gaia"
  CHAIN_BINARY: "/usr/local/bin/gaiad"
  NODE_MONIKER: "release-testnet"
  STATE_SYNC: "true"
  GAS_PRICE: "0.005uatom"
  CHAIN_ID: "theta-testnet-001"
  GENESIS_ZIPPED_URL: "https://github.com/cosmos/testnets/raw/master/release/genesis.json.gz"
  SEEDS: "639d50339d7045436c756a042906b9a69970913f@seed-01.theta-testnet.polypore.xyz:26656,3e506472683ceb7ed75c1578d092c79785c27857@seed-02.theta-testnet.polypore.xyz:26656"
  SYNC_RPC: "https://rpc.state-sync-01.theta-testnet.polypore.xyz:443"
  SYNC_RPC_SERVERS: "https://rpc.state-sync-01.theta-testnet.polypore.xyz:443,https://rpc.state-sync-02.theta-testnet.polypore.xyz:443"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gaia-init-script-config
  namespace: cosmos
data:
  script: |
    #!/bin/bash
    echo "Initializing $NODE_HOME..."
    rm -rf $NODE_HOME/
    $CHAIN_BINARY config chain-id $CHAIN_ID --home $NODE_HOME
    $CHAIN_BINARY config keyring-backend test --home $NODE_HOME
    $CHAIN_BINARY init $NODE_MONIKER --chain-id $CHAIN_ID --home $NODE_HOME
    sed -i -e "/minimum-gas-prices =/ s^= .*^= \"$GAS_PRICE\"^" $NODE_HOME/config/app.toml
    sed -i -e "/seeds =/ s^= .*^= \"$SEEDS\"^" $NODE_HOME/config/config.toml

    if $STATE_SYNC ; then
      echo "Configuring state sync..."
      CURRENT_BLOCK=$(curl -s $SYNC_RPC/block | jq -r '.result.block.header.height')
      TRUST_HEIGHT=$[$CURRENT_BLOCK-1000]
      TRUST_BLOCK=$(curl -s $SYNC_RPC/block\?height\=$TRUST_HEIGHT)
      TRUST_HASH=$(echo $TRUST_BLOCK | jq -r '.result.block_id.hash')
      sed -i -e '/enable =/ s/= .*/= true/' $NODE_HOME/config/config.toml
      sed -i -e '/trust_period =/ s/= .*/= "8h0m0s"/' $NODE_HOME/config/config.toml
      sed -i -e "/trust_height =/ s/= .*/= $TRUST_HEIGHT/" $NODE_HOME/config/config.toml
      sed -i -e "/trust_hash =/ s/= .*/= \"$TRUST_HASH\"/" $NODE_HOME/config/config.toml
      sed -i -e "/rpc_servers =/ s^= .*^= \"$SYNC_RPC_SERVERS\"^" $NODE_HOME/config/config.toml
    else
      echo "Skipping state sync..."
    fi

    echo "Downloading genesis file..."
    cd $NODE_HOME
    wget -q $GENESIS_ZIPPED_URL
    gzip -df genesis.json.gz
    cp genesis.json $NODE_HOME/config/genesis.json
    ls -lah $NODE_HOME/config/genesis.json
    echo "Initializing complete!"

---
apiVersion: batch/v1
kind: Job
metadata:
  name: gaia-init-job
  namespace: cosmos
spec:
  parallelism: 1
  completions: 1
  backoffLimit: 2
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      name: gaia-init-job
    spec:
      containers:
      - name: init-genesis
        image: morgulio/gaia:v18.0.0-rc3
        imagePullPolicy: Always
        command:
        - bash
        - -c
        - |
          mkdir -p $NODE_HOME
          cp /init/join-release-testnet.sh $NODE_HOME/
          cd $NODE_HOME
          chmod +x $NODE_HOME/join-release-testnet.sh
          ./join-release-testnet.sh
        envFrom:
        - configMapRef:
            name: gaia-config
        volumeMounts:
        - name: gaia-storage
          mountPath: /root
        - name: gaia-init
          mountPath: /init
        securityContext:
          privileged: true
          runAsUser: 0
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "2"
      restartPolicy: OnFailure
      volumes:
      - name: gaia-storage
        persistentVolumeClaim:
          claimName: gaia-pvc
      - name: gaia-init
        configMap:
          name: gaia-init-script-config
          items:
            - key: script
              path: join-release-testnet.sh

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gaia-node
  namespace: cosmos
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gaia
  template:
    metadata:
      labels:
        app: gaia
    spec:
      initContainers:
      - name: wait-for-init-job
        image: bitnami/kubectl:latest
        imagePullPolicy: Always
        command:
        - /bin/bash
        - -c
        - |
          MAX_RETRIES=15
          RETRY_COUNT=0

          while true; do
            JOB_STATUS=$(kubectl get job gaia-init-job -n cosmos -o jsonpath='{.status.succeeded}')
            EXIT_CODE=$?

            if [[ $EXIT_CODE -ne 0 ]]; then
              echo "Failed to get job status. Job might not exist. Retrying... ($RETRY_COUNT/$MAX_RETRIES)"
            elif [[ $JOB_STATUS == 1 ]]; then
              echo "gaia-init-job is complete!"
              break
            else
              echo "Waiting for gaia-init-job to complete... ($RETRY_COUNT/$MAX_RETRIES)"
            fi

            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [[ $RETRY_COUNT -ge $MAX_RETRIES ]]; then
              echo "Reached maximum retry count. Assuming job completion or non-existence."
              break
            fi
            
            sleep 5
          done
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
      containers:
      - name: gaia
        image: morgulio/gaia:v18.0.0-rc3
        imagePullPolicy: Always
        securityContext:
          privileged: true
          runAsUser: 0
        command: 
          - bash 
          - -c
          - gaiad start --x-crisis-skip-assert-invariants --home /root/.gaia
        envFrom:
        - configMapRef:
            name: gaia-config
        volumeMounts:
        - name: gaia-storage
          mountPath: /root
        ports:
        - containerPort: 26656
        - containerPort: 26657
        - containerPort: 1317
        - containerPort: 9090
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "12Gi"
            cpu: "4"
      volumes:
      - name: gaia-storage
        persistentVolumeClaim:
          claimName: gaia-pvc
